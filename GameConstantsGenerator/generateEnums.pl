#!/usr/bin/perl

################################################################################
# Sub routines:

sub uniq {
	    return keys %{{ map { $_ => 1 } @_ }};
    }

################################################################################


$GAMECONSTANTS_PATH = "../../ExampleGame/GameResources/gameconstants/";
$GAMECONSTANTS_FILEPATH = $GAMECONSTANTS_PATH . "gameconstants.names";

$TARGET_PATH = "../../ExampleGame/Code/ExampleGame/GameConstants/";
$ENUM_HEADER_FILE_PATH = $TARGET_PATH . "GameConstants.h";
$ENUM_SOURCE_FILE_PATH = $TARGET_PATH . "GameConstants.cpp";

printf "\nGame constants file: $GAMECONSTANTS_FILEPATH";
printf "\nGame constants:\n";

open(FILE_GAMECONSTANTS, $GAMECONSTANTS_FILEPATH);
@gameconstant_lines = <FILE_GAMECONSTANTS>;
close(FILE_GAMECONSTANTS);

foreach $line (@gameconstant_lines) {
	chomp($line);
	if ($line =~ /^(\w+)\s*$/) {
		printf "\n> $line";
		push(@constantnames, $1);
	} elsif ($line =~ /^\s*$/) {
		# continue;
	} else {
		die "\n! Malformed line when looking for game constants: ".$line;

	}
}

################################################################################
# Writing enums:

printf "\nWriting enums to files: $ENUM_HEADER_FILE_PATH and $ENUM_SOURCE_FILE_PATH\n";
open($FILE_ENUM_HEADER, ">$ENUM_HEADER_FILE_PATH");
open($FILE_ENUM_SOURCE, ">$ENUM_SOURCE_FILE_PATH");


################################################################################
# Writing enum header file:

$headerheadfill = <<END;
#ifndef GAME_CONSTANTS_H
#define GAME_CONSTANTS_H

/*
 * NOTE: When any of game constants in gameconstants.constants are modified, this file has to be regenerated by running generateEnums.pl in Tools/GameConstantsGenerator/
 */

#include <map>
#include <string>

enum GameConstantId_type {
END

print $FILE_ENUM_HEADER "$headerheadfill";

$PREFIX_GAMECONSTANT_ID = "GAME_CONSTANT_";

# Writing enum of constantnames:
foreach $constantname(@constantnames) {
	print $FILE_ENUM_HEADER "\n\t$PREFIX_GAMECONSTANT_ID"."$constantname,";
}
print $FILE_ENUM_HEADER "\n};\n";


$headertailfill = <<END;

extern std::map<std::string, GameConstantId_type> gameConstantNameToId;
//
extern std::map<GameConstantId_type, float>       gameConstants_float;
extern std::map<GameConstantId_type, int>         gameConstants_int;
extern std::map<GameConstantId_type, std::string> gameConstants_string;
extern std::map<GameConstantId_type, bool>        gameConstants_bool;

void InitGameConstants();
void ReadInGameConstants();

float       GetFloatGameConstant(GameConstantId_type gameConstatnId);
int         GetIntGameConstant(GameConstantId_type gameConstatnId);
std::string GetStringGameConstant(GameConstantId_type gameConstatnId);
bool        GetBoolGameConstant(GameConstantId_type gameConstatnId);

#endif // GAME_CONSTANTS_H

END

print $FILE_ENUM_HEADER "$headertailfill";

close($FILE_ENUM_HEADER);

################################################################################
# Writing enum source file:


$sourceheadfill = <<END;
#include "ExampleGame/GameConstants/GameConstants.h"
#include "Vajra/Utilities/Utilities.h"

std::map<std::string, GameConstantId_type> gameConstantNameToId;
//
std::map<GameConstantId_type, float>       gameConstants_float;
std::map<GameConstantId_type, int>         gameConstants_int;
std::map<GameConstantId_type, std::string> gameConstants_string;
std::map<GameConstantId_type, bool>        gameConstants_bool;

void InitGameConstants() {
END

print $FILE_ENUM_SOURCE "$sourceheadfill";

$i = 0;
foreach $constantname(@constantnames) {

	print $FILE_ENUM_SOURCE "\n\tgameConstantNameToId\[\"$constantname\"\] \= "."$PREFIX_GAMECONSTANT_ID"."$constantname".";";
	$i = $i + 1;
}
print $FILE_ENUM_SOURCE "\n\n\tReadInGameConstants();";
print $FILE_ENUM_SOURCE "\n}\n\n";


$sourcetailfill = <<END;
float GetFloatGameConstant(GameConstantId_type gameConstantId) {
	ASSERT(gameConstants_float.find(gameConstantId) != gameConstants_float.end(), "Looking for game constant of id %d in float constants, are you sure the constant is declared and that the datatype by which you are trying to get it is correct?", gameConstantId);
	return gameConstants_float[gameConstantId];
}

int GetIntGameConstant(GameConstantId_type gameConstantId) {
	ASSERT(gameConstants_int.find(gameConstantId) != gameConstants_int.end(), "Looking for game constant of id %d in int constants, are you sure the constant is declared and that the datatype by which you are trying to get it is correct?", gameConstantId);
	return gameConstants_int[gameConstantId];
}

std::string GetStringGameConstant(GameConstantId_type gameConstantId) {
	ASSERT(gameConstants_string.find(gameConstantId) != gameConstants_string.end(), "Looking for game constant of id %d in string constants, are you sure the constant is declared and that the datatype by which you are trying to get it is correct?", gameConstantId);
	return gameConstants_string[gameConstantId];
}

bool GetBoolGameConstant(GameConstantId_type gameConstantId) {
	ASSERT(gameConstants_bool.find(gameConstantId) != gameConstants_bool.end(), "Looking for game constant of id %d in bool constants, are you sure the constant is declared and that the datatype by which you are trying to get it is correct?", gameConstantId);
	return gameConstants_bool[gameConstantId];
}

END
print $FILE_ENUM_SOURCE "$sourcetailfill";

close($FILE_ENUM_SOURCE);

################################################################################

printf "\nDONE\n";

